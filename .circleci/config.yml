version: 2.1

orbs:
  slack: circleci/slack@4.12.1

parameters:
  workflow_id:
    type: string
    default: '${CIRCLE_WORKFLOW_ID:0:7}'

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            
            SUCCESS=$(curl --insecure https://kvdb.io/K6h8LRnx4zoUpepL2DQxaJ/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if(( $SUCCESS == 1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      # - slack/notify:
      #       event: fail
      #       template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run test front-end
          command: |
            # Change directory to frontend
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run  back-end
          command: |
            # Change directory to frontend
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan-frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
            
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan-backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo $(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text) >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # - destroy-environment
      
    
  configure-infrastructure:
    docker:
       - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2d:c9:3d:32:06:af:91:f4:39:41:7a:27:24:b1:fa:0e"]
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip ansible aws-cli   
      - attach_workspace:
          at: ~/
      # - restore_cache:
      #     keys: [backend-build]
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production > backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - destroy-environment      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations >> migrations.txt
      - run:
          name: Sending Migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations.txt
            then
              echo "Successful Migration!"
              curl --insecure https://kvdb.io/K6h8LRnx4zoUpepL2DQxaJ/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            else
              echo "Failed Migration!"
            fi     
      - destroy-environment
      - revert-migrations  

  deploy-frontend:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      # - attach_workspace:
      #     at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm ansible curl aws-cli
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations       
                    
  deploy-backend:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2d:c9:3d:32:06:af:91:f4:39:41:7a:27:24:b1:fa:0e"]
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm tree aws-cli ansible
      - restore_cache:
          keys: [backend-build] 
      - attach_workspace:
          at: ~/   
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz . 
            tree -afC /root/project/.circleci -I *node_modules*
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is ------- $(tail -1 inventory.txt)"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml \
            --ssh-common-args='-o StrictHostKeyChecking=no'
      - destroy-environment
      - revert-migrations 

  smoke-test:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
             apk add --update --no-cache curl aws-cli tar gzip nodejs npm
      - run:
          name: Backend URL smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "${API_URL}"
            # if curl -s "${API_URL}/api/status" | grep "ok"
            # if curl -s --head "https://google.com"
            if curl --connect-timeout 5 "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - destroy-environment
      - revert-migrations  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip npm nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeaple-${CIRCLE_WORKFLOW_ID:0:7}"\
            --tags project=udapeople
            echo OldWorkflowID: ${OldWorkflowID}
            echo CurrentWorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment
      - revert-migrations   


  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id and remove stacks
          command: |
            echo <<pipeline.parameters.workflow_id>>
            export OldWorkflowID=<<pipeline.parameters.workflow_id>>
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "Deleting up stacks........"
              # aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              # aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              # aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi

  prometheus-node-exporter:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - '2d:c9:3d:32:06:af:91:f4:39:41:7a:27:24:b1:fa:0e'
      - run:
          name: Install dependencies
          command: |
            apk add --update aws-cli tar gzip ansible nodejs npm
      - attach_workspace:
          at: ~/
      - run:
          name: Prometheus Node Exporter
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt node-exporter.yml
      - destroy-environment
      - revert-migrations
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - prometheus-node-exporter:
          requires: [deploy-infrastructure]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
      


#  #!/bin/bash
#           sudo apt update -y
#           sudo apt upgrade -y
#           sudo apt install nginx -y
#           sudo systemctl start nginx
#           sudo systemctl enable nginx

#           sudo useradd --no-create-home --shell /bin/false prome
#           sudo useradd --no-create-home --shell /bin/false node_exporter
#           # Install Prometheus
#           sudo mkdir /etc/prometheus
#           sudo mkdir /var/lib/prometheus
#           # Download Prometheus and copy to /usr/local/bin
#           wget https://github.com/prometheus/prometheus/releases/download/v2.0.0/prometheus-2.0.0.linux-amd64.tar.gz
#           tar xvf prometheus-2.0.0.linux-amd64.tar.gz
#           sudo cp prometheus-2.0.0.linux-amd64/prometheus /usr/local/bin/
#           sudo cp prometheus-2.0.0.linux-amd64/promtool /usr/local/bin/
#           sudo chown prome:prome /usr/local/bin/prometheus
#           sudo chown prome:prome /usr/local/bin/promtool
#           sudo cp -r prometheus-2.0.0.linux-amd64/consoles /etc/prometheus
#           sudo cp -r prometheus-2.0.0.linux-amd64/console_libraries /etc/prometheus
#           sudo chown -R prome:prome /etc/prometheus/consoles
#           sudo chown -R prome:prome /etc/prometheus/console_libraries
#           sudo chown -R prome:prome /var/lib/prometheus
#           rm -rf prometheus-2.0.0.linux-amd64.tar.gz prometheus-2.0.0.linux-amd64
#           # Install node exporter
#           wget https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz
#           tar xzf node_exporter-1.0.1.linux-amd64.tar.gz
#           sudo cp node_exporter-1.0.1.linux-amd64/node_exporter /usr/local/bin/node_exporter
#           sudo chown -R node_exporter:node_exporter /usr/local/bin/node_exporter
#           rm -rf node_exporter-1.0.1.linux-amd64.tar.gz node_exporter-1.0.1.linux-amd64
#           # Install Alertmanager
#           wget https://github.com/prometheus/alertmanager/releases/download/v0.21.0/alertmanager-0.21.0.linux-amd64.tar.gz
#           tar xvfz alertmanager-0.21.0.linux-amd64.tar.gz
#           sudo cp alertmanager-0.21.0.linux-amd64/alertmanager /usr/local/bin/
#           sudo cp alertmanager-0.21.0.linux-amd64/amtool /usr/local/bin/
#           sudo mkdir /var/lib/alertmanager

#           rm -rf alertmanager-0.21.0.linux-amd64.tar.gz alertmanager-0.21.0.linux-amd64

#           # Configure node exporter service
#           sudo echo "[Unit]" >> /etc/systemd/system/node-exporter.service
#           sudo echo "Description=Prometheus Node Exporter Service" >> /etc/systemd/system/node-exporter.service
#           sudo echo "After=network.target" >> /etc/systemd/system/node-exporter.service
#           sudo echo "" >> /etc/systemd/system/node-exporter.service
#           sudo echo "[Service]" >> /etc/systemd/system/node-exporter.service
#           sudo echo "User=node_exporter" >> /etc/systemd/system/node-exporter.service
#           sudo echo "Group=node_exporter" >> /etc/systemd/system/node-exporter.service
#           sudo echo "Type=simple" >> /etc/systemd/system/node-exporter.service
#           sudo echo "ExecStart=/usr/local/bin/node_exporter" >> /etc/systemd/system/node-exporter.service
#           sudo echo "" >> /etc/systemd/system/node-exporter.service
#           sudo echo "[Install]" >> /etc/systemd/system/node-exporter.service
#           sudo echo "WantedBy=multi-user.target" >> /etc/systemd/system/node-exporter.service
#           # Configure prometheus service
#           sudo echo "[Unit]" >> /etc/systemd/system/prometheus.service
#           sudo echo "Description=Prometheus" >> /etc/systemd/system/prometheus.service
#           sudo echo "Wants=network-online.target" >> /etc/systemd/system/prometheus.service
#           sudo echo "After=network-online.target" >> /etc/systemd/system/prometheus.service
#           sudo echo "" >> /etc/systemd/system/prometheus.service
#           sudo echo "[Service]" >> /etc/systemd/system/prometheus.service
#           sudo echo "User=prome" >> /etc/systemd/system/prometheus.service
#           sudo echo "Group=prome" >> /etc/systemd/system/prometheus.service
#           sudo echo "Type=simple" >> /etc/systemd/system/prometheus.service
#           sudo echo "ExecStart=/usr/local/bin/prometheus --config.file /etc/prometheus/prometheus.yml --storage.tsdb.path /var/lib/prometheus/ --web.console.templates=/etc/prometheus/consoles --web.console.libraries=/etc/prometheus/console_libraries" >> /etc/systemd/system/prometheus.service
#           sudo echo "" >> /etc/systemd/system/prometheus.service
#           sudo echo "[Install]" >> /etc/systemd/system/prometheus.service
#           sudo echo "WantedBy=multi-user.target" >> /etc/systemd/system/prometheus.service
#           # Configure Alertmanager service
#           sudo echo "[Unit]" >> /etc/systemd/system/alertmanager.service
#           sudo echo "Description=Alert Manager" >> /etc/systemd/system/alertmanager.service
#           sudo echo "Wants=network-online.target" >> /etc/systemd/system/alertmanager.service
#           sudo echo "After=network-online.target" >> /etc/systemd/system/alertmanager.service
#           sudo echo "" >> /etc/systemd/system/alertmanager.service
#           sudo echo "[Service]" >> /etc/systemd/system/alertmanager.service
#           sudo echo "User=prome" >> /etc/systemd/system/alertmanager.service
#           sudo echo "Group=prome" >> /etc/systemd/system/alertmanager.service
#           sudo echo "Type=simple" >> /etc/systemd/system/alertmanager.service
#           sudo echo "ExecStart=/usr/local/bin/alertmanager --config.file=/etc/prometheus/alertmanager.yml --storage.path=/var/lib/alertmanager" >> /etc/systemd/system/alertmanager.service
#           sudo echo "" >> /etc/systemd/system/alertmanager.service
#           sudo echo "Restart=always" >> /etc/systemd/system/alertmanager.service
#           sudo echo "[Install]" >> /etc/systemd/system/alertmanager.service
#           sudo echo "WantedBy=multi-user.target" >> /etc/systemd/system/alertmanager.service

#           # Create prometheus config
#           echo "global:" > prometheus.yml
#           echo "  scrape_interval: 15s" >> prometheus.yml
#           echo "  evaluation_interval: 15s" >> prometheus.yml
#           # Rule files
#           echo "rule_files:" >> prometheus.yml
#           echo "  - /etc/prometheus/rules.yml" >> prometheus.yml
#           # Alerts
#           echo "alerting:" >> prometheus.yml
#           echo "  alertmanagers:" >> prometheus.yml
#           echo "    - static_configs:" >> prometheus.yml
#           echo "      - targets:" >> prometheus.yml
#           echo "          - localhost:9093" >> prometheus.yml
#           # JOBS
#           echo "scrape_configs:" >> prometheus.yml
#           # prometheus job
#           # echo "  - job_name: 'prometheus'" >> prometheus.yml
#           # echo "    scrape_interval: 5s" >> prometheus.yml
#           # echo "    static_configs:" >> prometheus.yml
#           # echo "      - targets: ['localhost:9090']" >> prometheus.yml
#           # autodiscover EC2 instances job
#           echo "  - job_name: 'node'" >> prometheus.yml
#           echo "    ec2_sd_configs:" >> prometheus.yml
#           echo "      - region: us-east-1" >> prometheus.yml
#           echo "        access_key: AKIAVWTT4B3NMLUIFGTC" >> prometheus.yml
#           echo "        secret_key: 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" >> prometheus.yml
#           echo "        port: 9100" >> prometheus.yml
#           # Reposition prometheus.yml
#           sudo mv prometheus.yml /etc/prometheus/prometheus.yml

#           # Create rules
#           echo "groups:" > /etc/prometheus/rules.yml
#           echo "- name: Down" >> /etc/prometheus/rules.yml
#           echo "  rules:" >> /etc/prometheus/rules.yml
#           echo "  - alert: InstanceDown" >> /etc/prometheus/rules.yml
#           echo "    expr: up == 0" >> /etc/prometheus/rules.yml
#           echo "    for: 3m" >> /etc/prometheus/rules.yml
#           echo "    labels:" >> /etc/prometheus/rules.yml
#           echo "      severity: 'critical'" >> /etc/prometheus/rules.yml
#           echo "    annotations:" >> /etc/prometheus/rules.yml
#           echo "      summary: 'Instance  is down'" >> /etc/prometheus/rules.yml
#           echo "      description: ' Instance down for more than 3 minutes.'" >> /etc/prometheus/rules.yml

#           # Create alertmanager config
#           echo "route:" > alertmanager.yml
#           echo "  group_by: [Alertname]" >> alertmanager.yml
#           echo "  receiver: email-me" >> alertmanager.yml
#           echo "" >> alertmanager.yml
#           echo "receivers:" >> alertmanager.yml
#           echo "  - name: email-me" >> alertmanager.yml
#           echo "    email_configs:" >> alertmanager.yml
#           echo "      - to: mathewkeyruri@gmail.com" >> alertmanager.yml
#           echo "        from: mathewkeyruri@gmail.com" >> alertmanager.yml
#           echo "        smarthost: smtp.gmail.com:587" >> alertmanager.yml
#           echo "        auth_username: mathewkeyruri@gmail.com" >> alertmanager.yml
#           echo "        auth_identity: mathewkeyruri@gmail.com" >> alertmanager.yml
#           echo "        auth_password: fehxxdoztposzfzr" >> alertmanager.yml
#           # Reposition alertmanager.yml
#           sudo mv alertmanager.yml /etc/prometheus/alertmanager.yml
#           # csuzceqgjrskelub
#           # Alertmanager rules
#           echo "groups:" > rules.yml
#           echo "  - name: Down" >> rules.yml
#           echo "    rules:" >> rules.yml
#           echo "      - alert: InstanceDown" >> rules.yml
#           echo "        expr: up == 0" >> rules.yml
#           echo "        labels:" >> rules.yml
#           echo "          severity:" >> rules.yml
#           echo "        annotations:" >> rules.yml
#           echo "          summary: Instance is down" >> rules.yml
#           echo "          descriptions: Instance down for more than 3 minutes" >> rules.yml
#           # Reposition rules.yml
#           sudo mv rules.yml /etc/prometheus/rules.yml

#           # Enable and (Re)start services
#           sudo systemctl daemon-reload
#           sudo systemctl start prometheus
#           sudo systemctl enable prometheus
#           sudo systemctl enable node-exporter
#           sudo systemctl start node-exporter
#           sudo systemctl enable alertmanager
#           sudo systemctl start alertmanager